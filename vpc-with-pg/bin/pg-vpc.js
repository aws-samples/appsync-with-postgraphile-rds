#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const constructs_1 = require("constructs");
const pg_vpc_stack_1 = require("../lib/pg-vpc-stack");
const pg_rds_stack_1 = require("../lib/pg-rds-stack");
const pg_schema_stack_1 = require("../lib/pg-schema-stack");
const tagProps = {
    tags: {
        app: 'appsync-rds-pg-as-a-datasource',
    },
};
class RdsPgApp extends constructs_1.Construct {
    constructor(scope, id) {
        super(scope, id);
        const vpcStack = new pg_vpc_stack_1.PgVpcStack(app, 'PgVpcStack', {
            env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
            cidr: '10.0.0.0/16',
            ...tagProps,
        });
        const rdsStack = new pg_rds_stack_1.PgRdsStack(app, 'PgRdsStack', {
            env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
            vpc: vpcStack.vpc,
            port: 5432,
            stage: id,
            ...tagProps,
        });
        new pg_schema_stack_1.PgSchemaStack(app, 'PgSchemaStack', {
            env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
            vpc: vpcStack.vpc,
            stage: id,
            port: rdsStack.rdsInstance.dbInstanceEndpointPort,
            rdsProxy: rdsStack.rdsProxy,
            sg: rdsStack.dbConnectionGroup,
        });
    }
}
const app = new cdk.App({});
new RdsPgApp(app, 'dev');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGctdnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGctdnBjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFvQztBQUNwQyxtQ0FBa0M7QUFDbEMsMkNBQXNDO0FBQ3RDLHNEQUFnRDtBQUNoRCxzREFBZ0Q7QUFDaEQsNERBQXNEO0FBRXRELE1BQU0sUUFBUSxHQUFHO0lBQ2YsSUFBSSxFQUFFO1FBQ0osR0FBRyxFQUFFLGdDQUFnQztLQUN0QztDQUNGLENBQUE7QUFDRCxNQUFNLFFBQVMsU0FBUSxzQkFBUztJQUM5QixZQUFZLEtBQWMsRUFBRSxFQUFVO1FBQ3BDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUE7UUFFaEIsTUFBTSxRQUFRLEdBQUcsSUFBSSx5QkFBVSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUU7WUFDakQsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7WUFDekYsSUFBSSxFQUFFLGFBQWE7WUFDbkIsR0FBRyxRQUFRO1NBQ1osQ0FBQyxDQUFBO1FBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSx5QkFBVSxDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUU7WUFDakQsR0FBRyxFQUFFLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUU7WUFDekYsR0FBRyxFQUFFLFFBQVEsQ0FBQyxHQUFHO1lBQ2pCLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEVBQUU7WUFDVCxHQUFHLFFBQVE7U0FDWixDQUFDLENBQUE7UUFDRixJQUFJLCtCQUFhLENBQUMsR0FBRyxFQUFFLGVBQWUsRUFBRTtZQUN0QyxHQUFHLEVBQUUsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRTtZQUN6RixHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUc7WUFDakIsS0FBSyxFQUFFLEVBQUU7WUFDVCxJQUFJLEVBQUUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxzQkFBc0I7WUFDakQsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO1lBQzNCLEVBQUUsRUFBRSxRQUFRLENBQUMsaUJBQWlCO1NBQy9CLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUMzQixJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3RlcidcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnXG5pbXBvcnQgeyBQZ1ZwY1N0YWNrIH0gZnJvbSAnLi4vbGliL3BnLXZwYy1zdGFjaydcbmltcG9ydCB7IFBnUmRzU3RhY2sgfSBmcm9tICcuLi9saWIvcGctcmRzLXN0YWNrJ1xuaW1wb3J0IHsgUGdTY2hlbWFTdGFjayB9IGZyb20gJy4uL2xpYi9wZy1zY2hlbWEtc3RhY2snXG5cbmNvbnN0IHRhZ1Byb3BzID0ge1xuICB0YWdzOiB7XG4gICAgYXBwOiAnYXBwc3luYy1yZHMtcGctYXMtYS1kYXRhc291cmNlJyxcbiAgfSxcbn1cbmNsYXNzIFJkc1BnQXBwIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IGNkay5BcHAsIGlkOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpXG5cbiAgICBjb25zdCB2cGNTdGFjayA9IG5ldyBQZ1ZwY1N0YWNrKGFwcCwgJ1BnVnBjU3RhY2snLCB7XG4gICAgICBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSxcbiAgICAgIGNpZHI6ICcxMC4wLjAuMC8xNicsXG4gICAgICAuLi50YWdQcm9wcyxcbiAgICB9KVxuICAgIGNvbnN0IHJkc1N0YWNrID0gbmV3IFBnUmRzU3RhY2soYXBwLCAnUGdSZHNTdGFjaycsIHtcbiAgICAgIGVudjogeyBhY2NvdW50OiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9BQ0NPVU5ULCByZWdpb246IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX1JFR0lPTiB9LFxuICAgICAgdnBjOiB2cGNTdGFjay52cGMsXG4gICAgICBwb3J0OiA1NDMyLFxuICAgICAgc3RhZ2U6IGlkLFxuICAgICAgLi4udGFnUHJvcHMsXG4gICAgfSlcbiAgICBuZXcgUGdTY2hlbWFTdGFjayhhcHAsICdQZ1NjaGVtYVN0YWNrJywge1xuICAgICAgZW52OiB7IGFjY291bnQ6IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQsIHJlZ2lvbjogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfUkVHSU9OIH0sXG4gICAgICB2cGM6IHZwY1N0YWNrLnZwYyxcbiAgICAgIHN0YWdlOiBpZCxcbiAgICAgIHBvcnQ6IHJkc1N0YWNrLnJkc0luc3RhbmNlLmRiSW5zdGFuY2VFbmRwb2ludFBvcnQsXG4gICAgICByZHNQcm94eTogcmRzU3RhY2sucmRzUHJveHksXG4gICAgICBzZzogcmRzU3RhY2suZGJDb25uZWN0aW9uR3JvdXAsXG4gICAgfSlcbiAgfVxufVxuXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCh7fSlcbm5ldyBSZHNQZ0FwcChhcHAsICdkZXYnKVxuIl19